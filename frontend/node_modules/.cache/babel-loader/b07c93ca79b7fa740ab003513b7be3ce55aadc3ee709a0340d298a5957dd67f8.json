{"ast":null,"code":"var _s = $RefreshSig$();\nimport { defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  // if(data.isError){\n  //   return <p>{data.message}</p>\n  // }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Await\"\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //..\n    // return {isError : true,message:'Could not fetch the events...'};\n    // throw {message:\"an error occured\"}\n    // throw new Response(JSON.stringify({message:\"Could not fetch events.\",status:500}));\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    // const resData=await response.json();\n    // return resData.events;\n    return response.json();\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["defer","json","useLoaderData","EventsList","Fragment","_Fragment","jsxDEV","_jsxDEV","EventsPage","_s","data","events","children","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/VenkataGuravaiahNall/OneDrive - Zeta Global/Desktop/Advanced_React/12-adv-starting-project/frontend/src/pages/Events.jsx"],"sourcesContent":["import { defer, json, useLoaderData } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\nfunction EventsPage() {\r\n  const data=useLoaderData();\r\n  // if(data.isError){\r\n  //   return <p>{data.message}</p>\r\n  // }\r\n  const events=data.events;\r\n  return (\r\n    <>\r\n      {/* <EventsList  events={events}/> */}\r\n\r\n      Await\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\nasync function loadEvents(){\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if(!response.ok){\r\n    //..\r\n    // return {isError : true,message:'Could not fetch the events...'};\r\n    // throw {message:\"an error occured\"}\r\n    // throw new Response(JSON.stringify({message:\"Could not fetch events.\",status:500}));\r\n    throw json({message:'Could not fetch events.'},\r\n      {status:500\r\n\r\n      }\r\n    );\r\n  }else{\r\n    // const resData=await response.json();\r\n    // return resData.events;\r\n    return response.json();\r\n  }\r\n}\r\nexport function loader(){\r\n return  defer({\r\n    events:loadEvents()\r\n  })\r\n}"],"mappings":";AAAA,SAASA,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAC7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAClD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAACR,aAAa,CAAC,CAAC;EAC1B;EACA;EACA;EACA,MAAMS,MAAM,GAACD,IAAI,CAACC,MAAM;EACxB,oBACEJ,OAAA,CAAAF,SAAA;IAAAO,QAAA,EACwC;EAGxC,gBAAE,CAAC;AAEP;AAACH,EAAA,CAbQD,UAAU;EAAA,QACNN,aAAa;AAAA;AAAAW,EAAA,GADjBL,UAAU;AAenB,eAAeA,UAAU;AACzB,eAAeM,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC;IACd;IACA;IACA;IACA;IACA,MAAMhB,IAAI,CAAC;MAACiB,OAAO,EAAC;IAAyB,CAAC,EAC5C;MAACC,MAAM,EAAC;IAER,CACF,CAAC;EACH,CAAC,MAAI;IACH;IACA;IACA,OAAOJ,QAAQ,CAACd,IAAI,CAAC,CAAC;EACxB;AACF;AACA,OAAO,SAASmB,MAAMA,CAAA,EAAE;EACvB,OAAQpB,KAAK,CAAC;IACXW,MAAM,EAACG,UAAU,CAAC;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}